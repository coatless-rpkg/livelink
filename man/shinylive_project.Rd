% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shinylive-link.R
\name{shinylive_project}
\alias{shinylive_project}
\title{Create a Shinylive sharelink for multi-language projects}
\usage{
shinylive_project(
  files,
  engine,
  mode = "editor",
  header = TRUE,
  base_url = NULL
)
}
\arguments{
\item{files}{Named list where names are filenames and values are file content as character strings}

\item{engine}{Engine to use: "r" for R Shiny or "python" for Python Shiny}

\item{mode}{Shinylive mode: "editor" (show code editor) or "app" (show app only)}

\item{header}{Logical. Whether to show header in app mode (default: TRUE)}

\item{base_url}{Custom Shinylive base URL. If NULL, uses default Shinylive URL}
}
\value{
shinylive_project object containing the Shinylive URL and metadata
}
\description{
Unified function to create Shinylive projects for either R or Python.
This provides a consistent interface similar to webr_repl_project().
}
\examples{
# R Shiny project
r_files <- list(
  "app.R" = '
library(shiny)
source("utils.R")
ui <- fluidPage(titlePanel("My App"))
server <- function(input, output) {}
shinyApp(ui, server)
  ',
  "utils.R" = "helper_function <- function(x) { x * 2 }"
)

r_project <- shinylive_project(r_files, engine = "r", mode = "editor")
print(r_project)

# Python Shiny project
py_files <- list(
  "app.py" = '
from shiny import App, ui
from utils import process_data
app = App(ui.page_fluid("Hello"), None)
  ',
  "utils.py" = "def process_data(x): return x"
)

py_project <- shinylive_project(py_files, engine = "python", mode = "app")

}
