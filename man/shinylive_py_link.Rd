% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shinylive-link.R
\name{shinylive_py_link}
\alias{shinylive_py_link}
\title{Create a Shinylive sharelink for Python Shiny apps}
\usage{
shinylive_py_link(files, mode = "editor", header = TRUE, base_url = NULL)
}
\arguments{
\item{files}{Named list where names are filenames and values are file content as character strings.
For single-file apps, can also pass a character string as the app.py content.}

\item{mode}{Shinylive mode: "editor" (show code editor) or "app" (show app only)}

\item{header}{Logical. Whether to show header in app mode (default: TRUE)}

\item{base_url}{Custom Shinylive base URL. If NULL, uses default Shinylive URL}
}
\value{
shinylive_link object containing the Shinylive URL and metadata
}
\description{
Generates a shareable URL for Python Shiny applications that can run in the browser
using Shinylive. The app files are encoded and embedded in the URL.
}
\examples{
# Simple single-file Python Shiny app
app_code <- '
from shiny import App, render, ui

app_ui = ui.page_fluid(
    ui.h2("Hello Shinylive!"),
    ui.input_slider("n", "N", 0, 100, 20),
    ui.output_text_verbatim("txt"),
)

def server(input, output, session):
    @output
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"

app = App(app_ui, server)
'

link <- shinylive_py_link(app_code, mode = "app")
print(link)

# Multi-file Python Shiny app
files <- list(
  "app.py" = app_code,
  "utils.py" = "def helper_function(x):\n    return x * 2",
  "data.csv" = "x,y\n1,2\n3,4\n5,6"
)

link <- shinylive_py_link(files, mode = "editor")

}
